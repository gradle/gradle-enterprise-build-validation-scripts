static getInputParam(Gradle gradle, String name) {
    def ENV_VAR_PREFIX = ''
    def envVarName = ENV_VAR_PREFIX + name.toUpperCase().replace('.', '_').replace('-', '_')
    return gradle.startParameter.systemPropertiesArgs[name] ?: System.getProperty(name) ?: System.getenv(envVarName)
}

def remoteBuildCacheUrl = getInputParam(gradle, 'develocity.build-validation.remoteBuildCacheUrl')

settingsEvaluated { settings ->
    settings.buildCache {
        local {
            enabled = false
        }
        (remote ?: remote(HttpBuildCache)).with {
            enabled = true
            push = false
            def uri = remoteBuildCacheUrl
                ? withPathTrailingSlash(new URI(remoteBuildCacheUrl))
                : null
            if (uri && delegate instanceof HttpBuildCache) {
                url = uri
            } else if (uri && delegate.class.name.startsWith('com.gradle.develocity')) {
                path = uri.path
            } else {
                logger.warn("""
                    Couldn't set build cache path automatically for remote of type '${delegate.class.name}'.
                    Please ensure the path set on the 2nd build is the same as the 1st build.
                """.stripIndent())
            }
        }
    }
}

static URI withPathTrailingSlash(URI uri) {
    uri.path.endsWith("/") ? uri : new URI(uri.scheme, uri.userInfo, uri.host, uri.port, uri.path + "/", uri.query, uri.fragment)
}
